import connection.DBConnect;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Pengajar extends JFrame{
    private JPanel pengajar;
    private JTextField txtIDP;
    private JTextField txtNama;
    private JTextField txtAlamat;
    private JTextField txtNoTlp;
    private JTextField txtUlasan;
    private JTextField txtUsername;
    //private JTextField txtPassword;
    private JButton simpanButton;
    private JButton lihatButton;
    private JButton ubahButton;
    private JButton hapusButton;
    private JTable tblPengajar;
    private JTextField txtstatus;
    private JPasswordField txtpass;
    private JPanel kelolapengajar;
    DBConnect connect = new DBConnect();
    private DefaultTableModel model;
    String IDPengajar, Nama, Alamat, NoTelp, Ulasan, Username, Password;

    int Status;

    public static void main(String[] args) {
        JFrame tcGUI = new Pengajar();
        tcGUI.setVisible(true);
    }
    public Pengajar() {
        connect = new DBConnect();
        model = new DefaultTableModel();
        tblPengajar.setModel(model);
        setContentPane(pengajar);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setSize(460, 470);
        txtIDP.setEditable(false);
        txtIDP.setText(getAutoGeneratedID());
        txtstatus.setText("Aktif");
        txtstatus.setEditable(false);
        addColumn();
        loadData();

        simpanButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDPengajar = txtIDP.getText();
                Nama = txtNama.getText();
                Alamat = txtAlamat.getText();
                NoTelp = txtNoTlp.getText();
                Ulasan = txtUlasan.getText();
                Username = txtUsername.getText();
                Password = String.valueOf(txtpass.getPassword());

                try {
                    Status = txtstatus.getText().equalsIgnoreCase("Aktif") ? 1:0;

                }catch (NumberFormatException ex){
                    JOptionPane.showMessageDialog(null, "Status harus angka");
                    return;
                }
                if (txtNama.getText().isEmpty() || txtAlamat.getText().isEmpty() || txtNoTlp.getText().isEmpty() || txtUlasan.getText().isEmpty() ||
                        txtUsername.getText().isEmpty() || txtpass.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Data Tidak boleh ada yang kosong");
                } else {
                    int i = 0;
                    try {
                        String query = "INSERT INTO tblPengajar VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                        connect.pstat = connect.conn.prepareStatement(query);
                        connect.pstat.setString(1, IDPengajar);
                        connect.pstat.setString(2, Nama);
                        connect.pstat.setString(3, Alamat);
                        connect.pstat.setString(4, NoTelp);
                        connect.pstat.setString(5, Ulasan);
                        connect.pstat.setString(6, Username);
                        connect.pstat.setString(7, Password);
                        connect.pstat.setInt(8, Status);

                        connect.pstat.executeUpdate();
                        connect.pstat.close();
                    } catch (SQLException ex) {
                        System.out.println("Error saat menambahkan Data Pengajar: " + ex);
                    }
                    JOptionPane.showMessageDialog(null, "Data Pengajar Berhasil ditambahkan!!");
                    loadData();
                    clear();
                }
            }
        });

        lihatButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadData();
            }
        });

        ubahButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDPengajar =txtIDP.getText();
                Nama = txtNama.getText();
                Alamat = txtAlamat.getText();
                NoTelp = txtNoTlp.getText();
                Ulasan = txtUlasan.getText();
                Username = txtUsername.getText();
                Password = txtpass.getText();
                //Status = cmbStatus.getSelectedItem().toString();

                try {
                    String query = "UPDATE tblPengajar SET nama_png=?, alamat_png=?, no_png=?, ulasan=?, username=?, password=? WHERE id_png=?";

                    DBConnect connect = new DBConnect();
                    connect.pstat = connect.conn.prepareStatement(query);
                    connect.pstat.setString(1, Nama);
                    connect.pstat.setString(2, Alamat);
                    connect.pstat.setString(3, NoTelp);
                    connect.pstat.setString(4, Ulasan);
                    connect.pstat.setString(5, Username);
                    connect.pstat.setString(6, Password);
                    connect.pstat.setString(7,IDPengajar);

                    connect.pstat.executeUpdate();
                    connect.pstat.close();
                } catch (Exception ex) {
                    System.out.println("Error saat mengubah Data Pengajar " + ex);
                }
                JOptionPane.showMessageDialog(null, "Data Pengajar berhasil ditambahkan!");
                loadData();
            }
        });

        hapusButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                IDPengajar = txtIDP.getText();
                try {
                    String query = "UPDATE tblPengajar SET status = 0 WHERE id_png=?";
                    connect.pstat = connect.conn.prepareStatement(query);
                    connect.pstat.setString(1, IDPengajar);
                    connect.pstat.executeUpdate();
                    connect.pstat.close();
                    JOptionPane.showMessageDialog(null, "Delete Data Pengajar Berhasil!");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Delete Data Pengajar Gagal!"+ex.getMessage());
//                    String errorMessage = ex.getMessage();
//                    System.out.println("Error Message: " + errorMessage);
                    System.out.println("Terjadi Error saat Delete Data Pengajar: " + ex);
                }
                loadData();

            }
        });

        tblPengajar.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                int i = tblPengajar.getSelectedRow();
                if (i == -1) {
                    return;
                }
                txtIDP.setText((String) model.getValueAt(i, 0));
                txtNama.setText((String) model.getValueAt(i, 1));
                txtAlamat.setText((String) model.getValueAt(i, 2));
                txtNoTlp.setText((String) model.getValueAt(i, 3));
                txtUlasan.setText((String) model.getValueAt(i, 4));
                txtUsername.setText((String) model.getValueAt(i, 5));
                txtpass.setText((String) model.getValueAt(i, 6));
                int stringStat = Integer.parseInt(model.getValueAt(i, 7).toString());

                if (stringStat == 1) {
                 txtstatus.setText("Aktif");
                } else if (stringStat == 0) {
                    txtstatus.setText("Tidak Aktif");
                }
            }
        });
    }

    public void addColumn() {
        model.addColumn("Id Pengajar");
        model.addColumn("Nama");
        model.addColumn("alamat");
        model.addColumn("nomor_telepon");
        model.addColumn("ulasan");
        model.addColumn("username");
        model.addColumn("password");
        model.addColumn("status");
    }

    public void clear() {
        txtIDP.setText(getAutoGeneratedID());
        txtNama.setText("");
        txtAlamat.setText("");
        txtNoTlp.setText("");
        txtUlasan.setText("");
        txtUsername.setText("");
        txtpass.setText("");
    }

    public void loadData() {
       // model.setColumnCount(0);
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();

        try {
            DBConnect connect = new DBConnect();
            connect.stat = connect.conn.createStatement();
            String query = "SELECT * FROM tblPengajar";
            connect.result = connect.stat.executeQuery(query);

            while (connect.result.next()) {
                Object[] obj = new Object[8];
                obj[0] = connect.result.getString("id_png");
                obj[1] = connect.result.getString("nama_png");
                obj[2] = connect.result.getString("alamat_png");
                obj[3] = connect.result.getString("no_png");
                obj[4] = connect.result.getString("ulasan");
                obj[5] = connect.result.getString("username");
                obj[6] = connect.result.getString("password");
                obj[7] = connect.result.getInt("status");
                model.addRow(obj);
            }
            connect.stat.close();
            connect.result.close();
        } catch (Exception ex) {
            System.out.println("Terjadi kesalahan saat melihat Data Pengajar: " + ex);
        }
    }

    public String getAutoGeneratedID() {
        String id = "";
        try {
            connect.stat = connect.conn.createStatement();
            String query = "SELECT MAX(SUBSTRING(id_png, 6, LEN(id_png))) AS ID FROM tblPengajar";
            connect.result = connect.stat.executeQuery(query);

            if (connect.result.next()) {
                String lastID = connect.result.getString("ID");
                if(lastID != null){
                    int incrementedID = Integer.parseInt(lastID) + 1;
                    id = "PGJR" + String.format("%03d", incrementedID);
                }else {
                    id= "PGJR001";
                }
            }
            connect.stat.close();
            connect.result.close();
        } catch (SQLException e) {
            System.out.println("Terjadi kesalahan: " + e.getMessage());
        }
        return id;
    }
}
